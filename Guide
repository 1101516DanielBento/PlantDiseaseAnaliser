1. criacao de pasta desktop/data
2. colar raw/color
3. docker run -it tensorflow/tensorflow:1.1.0 bash
4. criacao de pasta de projecto: chamada PlantDiseaseAnalizer
5. criar pasta dentro da nova pasta, chamada tf_files
6. docker run -it --volume ${HOME}/Desktop/PlantDiseaseAnalizer/tf_files:/tf_files --workdir /tf_files --publish 6006:6006 tensorflow/tensorflow:1.1.0 bash
7. colar fotos dentro da pasta tf_files, por exemplo: dentro de nova pasta chamada "data".
Ou seja, eu passo a ter PlantDiseaseAnalizer/tf_files/data/{N Pastas com fotos N fotos cada pasta}
8. Arranjar o ficheiro de treino (retrain.py)
9. correr comando de treino:
python retrain.py --bottleneck_dir=/tf_files/bottlenecks --how_many_training_steps 500 --model_dir=/tf_files/inception --output_graph=/tf_files/retrained_graph.pb --output_labels=/tf_files/retrained_labels.txt --image_dir /tf_files/data (NOME DA PASTA DAS IMAGENS)

10. WAITTING

11. cria ficheiro: label_image.py
		import tensorflow as tf
		import sys

		# change this as you see fit
		image_path = sys.argv[1]

		# Read in the image_data
		image_data = tf.gfile.FastGFile(image_path, 'rb').read()

		# Loads label file, strips off carriage return
		label_lines = [line.rstrip() for line 
				   in tf.gfile.GFile("/tf_files/retrained_labels.txt")]

		# Unpersists graph from file
		with tf.gfile.FastGFile("/tf_files/retrained_graph.pb", 'rb') as f:
		    graph_def = tf.GraphDef()
		    graph_def.ParseFromString(f.read())
		    _ = tf.import_graph_def(graph_def, name='')

		with tf.Session() as sess:
		    # Feed the image_data as input to the graph and get first prediction
		    softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')
		    
		    predictions = sess.run(softmax_tensor, \
			     {'DecodeJpeg/contents:0': image_data})
		    
		    # Sort to show labels of first prediction in order of confidence
		    top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]
		    
		    for node_id in top_k:
			human_string = label_lines[node_id]
			score = predictions[0][node_id]
			print('%s (score = %.5f)' % (human_string, score))

12. executar comando: /tf_files/label_image.py /tf_files/..../___.jpg



(https://github.com/llSourcell/tensorflow_image_classifier/tree/master/src)




